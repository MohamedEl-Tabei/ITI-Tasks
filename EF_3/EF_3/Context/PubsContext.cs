// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using EF_3.Models;
using Microsoft.EntityFrameworkCore;

namespace EF_3.Context;

public partial class PubsContext : DbContext
{
    public PubsContext()
    {
    }

    public PubsContext(DbContextOptions<PubsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<author> authors { get; set; }

    public virtual DbSet<employee> employees { get; set; }

    public virtual DbSet<title> titles { get; set; }

    public virtual DbSet<titleauthor> titleauthors { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-HG10M60;Initial Catalog=pubs;Integrated Security=True;TrustServerCertificate=true");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<author>(entity =>
        {
            entity.HasKey(e => e.au_id).HasName("UPKCL_auidind");

            entity.Property(e => e.phone)
                .HasDefaultValue("UNKNOWN")
                .IsFixedLength();
            entity.Property(e => e.state).IsFixedLength();
            entity.Property(e => e.zip).IsFixedLength();
        });

        modelBuilder.Entity<employee>(entity =>
        {
            entity.HasKey(e => e.emp_id)
                .HasName("PK_emp_id")
                .IsClustered(false);

            entity.ToTable("employee", tb => tb.HasTrigger("employee_insupd"));

            entity.HasIndex(e => new { e.lname, e.fname, e.minit }, "employee_ind").IsClustered();

            entity.Property(e => e.emp_id).IsFixedLength();
            entity.Property(e => e.hire_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.job_id).HasDefaultValue((short)1);
            entity.Property(e => e.job_lvl).HasDefaultValue((byte)10);
            entity.Property(e => e.minit).IsFixedLength();
            entity.Property(e => e.pub_id)
                .HasDefaultValue("9952")
                .IsFixedLength();
        });

        modelBuilder.Entity<title>(entity =>
        {
            entity.HasKey(e => e.title_id).HasName("UPKCL_titleidind");

            entity.Property(e => e.pub_id).IsFixedLength();
            entity.Property(e => e.pubdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.type)
                .HasDefaultValue("UNDECIDED")
                .IsFixedLength();
        });

        modelBuilder.Entity<titleauthor>(entity =>
        {
            entity.HasKey(e => new { e.au_id, e.title_id }).HasName("UPKCL_taind");

            entity.HasOne(d => d.au).WithMany(p => p.titleauthors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__titleauth__au_id__31EC6D26");

            entity.HasOne(d => d.title).WithMany(p => p.titleauthors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__titleauth__title__32E0915F");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}